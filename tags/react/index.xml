<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on Future [ _ ]</title>
    <link>https://uzimith.net/tags/react/</link>
    <description>Recent content in React on Future [ _ ]</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>uzimith All rights reserved.</copyright>
    <lastBuildDate>Mon, 16 Feb 2015 09:42:00 +0900</lastBuildDate>
    
	<atom:link href="https://uzimith.net/tags/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javscriptのクラス対応(=React 0.13対応)のFlummoxを試してみた</title>
      <link>https://uzimith.net/posts/2015/02/16/react-flummox-demo/</link>
      <pubDate>Mon, 16 Feb 2015 09:42:00 +0900</pubDate>
      
      <guid>https://uzimith.net/posts/2015/02/16/react-flummox-demo/</guid>
      <description>前回の記事で快適なReact環境を手に入れることが出来た私ですが、Fluxを導入しようとして壁にぶち当たりました。
Fluxxorなどの有名なFlux実装などは StoreとComponentの紐付けに従来のMixinを利用することが前提となっていますが、ReactにおいてMixinはReact.Componentを利用していると使えません。
ちょっとGithubを見ていたらacdlite/flummoxが特徴にReact 0.13対応だと書いてあったのでとりあえずTodoを実装しました。
 Todoデモ  ソースコード   簡単な説明 Actions class TodoActions extends Actions createTodo: (text) -&amp;gt; id = (+new Date() + Math.floor(Math.random() * 999999)).toString(36) { id: id text: text complete: false } 関数の返り値が自動的にDispatcherに送られる。(undefinedを送るとDispatcherに無視されるので注意)
Store class TodoStore extends Store constructor: (flux) -&amp;gt; super todoActions = flux.getActionIds(&amp;#39;todo&amp;#39;) @register(todoActions.createTodo, @handleNewTodo) @state = { todos: { 1: { id: 1 complete: true text: &amp;#34;hoge&amp;#34; } } } handleNewTodo: (todo) =&amp;gt; todos = @state.</description>
    </item>
    
    <item>
      <title>React.jsをCoffeeScriptとjadeで書く</title>
      <link>https://uzimith.net/posts/2015/02/13/react-jade-coffee/</link>
      <pubDate>Fri, 13 Feb 2015 21:00:00 +0900</pubDate>
      
      <guid>https://uzimith.net/posts/2015/02/13/react-jade-coffee/</guid>
      <description>はじめに  React v0.13.0 Beta 1 | React  React.Componentを使うと生のJSのclass形式でReact Componentを定義できる  reactjs - react-jadeでjadeテンプレートから仮想DOMを出力する - Qiita  JSXのXの部分をjadeで書けるようにするライブラリ (Jade -&amp;gt; React VDOM)   ここあたりの記事を読んでRiot.jsなら素でできるCoffeeScriptとJadeの組み合わせがReactでも出来そうだと気づいたので試行錯誤中、 よさ気な書き方を見つけた話です。
結論 こうです。
https://gist.github.com/uzimith/145a0cf8e342dc46ac96
React = require(&amp;#39;react&amp;#39;) jade = require(&amp;#39;react-jade&amp;#39;) _ = require(&amp;#39;lodash&amp;#39;) class Counter extends React.Component constructor: -&amp;gt; @state =  count: 0 tick: =&amp;gt; @setState count: @state.count + 1 render: =&amp;gt; jade.compile(&amp;#34;&amp;#34;&amp;#34; #counter span Count : button(onClick=tick)= count &amp;#34;&amp;#34;&amp;#34;)(_.assign {}, @, @props, @state) React.</description>
    </item>
    
    <item>
      <title>middleman-blogでの検索機能をJavascript(React)で実装した。</title>
      <link>https://uzimith.net/posts/2015/01/11/middleman-blog-search/</link>
      <pubDate>Sun, 11 Jan 2015 14:12:00 +0900</pubDate>
      
      <guid>https://uzimith.net/posts/2015/01/11/middleman-blog-search/</guid>
      <description>middleman-blogの検索機能の前例はあるんですが jQueryを利用しているため宗教上の理由により使用できません。
説明 最近はReactが気になっているのでこちらで実装しました。
こちらがデモです。
前例に比べて該当部分を表示する機能も追加したので使いやすいんじゃないかと。
実装 ソースコードはこちらです。
uzimith/middleman-blog-search-sample
参考にどうぞ。
所感 Reactのチュートリアル見ながら書いてたら簡単に書けました。 さらにちょうど先月のAdvent Calendarが分かりやすいので、いま始めやすいと思います。
一人React.js Advent Calendar 2014 - Qiita
書き始めは双方向バインドじゃないのかと若干失望気味だったんですが、データの流れを一方向にすることでアプリケーションを複雑さを 減らすという思想が結構良いですね。一度Fluxを使った中規模アプリケーション書いてみたいです。
Reactはコンポーネント思想でつまりいろいろ飛び飛びで見なくても、その機能のすべてが集まってる、そういう感じで書く印象です。
Web ComponentsとPolymerが同じ思想で出来てるのかなといった感じですが、 Polymerは将来的に正しく未来のWebはこう書ければいいという夢を語る実装で、Reactは現実的に実用できる範囲で実装されているんでしょう。
いまPolymerを使うと遅すぎて話にならないですが、Web ComponentsはC++で実装されるわけですからそのうち早くなる未来が待ってるはず。
それまではコンポーネント思想ならReactですね。よさ気なライブラリです。</description>
    </item>
    
    <item>
      <title>middlemanでReactを書く</title>
      <link>https://uzimith.net/posts/2015/01/06/middleman-react/</link>
      <pubDate>Tue, 06 Jan 2015 11:47:00 +0900</pubDate>
      
      <guid>https://uzimith.net/posts/2015/01/06/middleman-react/</guid>
      <description>JavascriptのライブラリといえばAngularJSとかvue.jsなどが流行っていますが 今回はさらなる流行の最先端Reactです。
というわけで書き始めようと思うのですが、書き方がいろいろあって一番簡単なのはCDNを使うことです。
&amp;lt;script src=&amp;#34;http://fb.me/react-0.11.1.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;http://fb.me/JSXTransformer-0.11.1.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/jsx;harmony=true&amp;#34;&amp;gt; //ここに書ける  &amp;lt;/script&amp;gt; さすがにコレはリアルタイムでコンパイルしているので遅くなるみたいです。
普通こういったJavascriptライブラリを書くとなるとGulpを使うことになりますが ちょっと気持ちが萎える(Gulp好きじゃない)わりにいい感じにMiddlemanと協調するGulpfileを書けなかった(だからキライ)ので もうmiddlemanに処理させたいと思います。
というかいまMiddlemanで書いてるんだから、よしなに頑張ってくれ。
というわけでmiddleman-reactです。 公式のreactjs/react-railsにインスパイアされた(ていうかパクった)middleman拡張です。
Gemfile gem &amp;#34;middleman-react&amp;#34; config.rb activate :react, harmony: true after_configuration do sprockets.append_path File.dirname(::React::Source.bundled_path_for(&amp;#39;react.js&amp;#39;)) end source/javascripts/all.js //= require react-with-addons //= require_tree . あとはjavascripts配下に.js.jsxファイルを追加していくといい感じに書けます。
簡単ですね。
HTMLのbodyの最後とかで下みたく書いたりとかすればいいんじゃないかと。
hoge.slim #hogehoge = javascript_include_tag &amp;#34;all&amp;#34; ところでmiddleman-reactのharmonyオプションですが、もともと見当たらなかったので私が追加しました。
ES6やES7の構文がコンパイルできるようになります。
つまり下記が使えるようになります。実はあまり調べてませんが。
 es6-arrow-functions es6-object-concise-method es6-object-short-notation es6-classes es6-rest-params es6-templates es6-destructuring es7-spread-property  https://github.com/facebook/react/blob/master/vendor/fbtransform/visitors.js
アロー関数やテンプレートリテラルは便利なのでぜひお使いください。
所感 簡単に導入できるのはいいんですがやっぱりrequireが使いたくなってきますね。 superagentなんかはrequireできないと使えないです。
ここあたりのJavascriptライブラリのベストプラクティスが分からなくていつも困ってます。
今思っているのはGuardからwatchifyを呼び出すのが汎用的な解決なんじゃないかなってことです。試してないですが。</description>
    </item>
    
  </channel>
</rss>