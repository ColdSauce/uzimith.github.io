<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>uzimith.github.io</title>
  <id>https://uzimith.github.io</id>
  <link href="https://uzimith.github.io"/>
  <link href="https://uzimith.github.io/feed.xml" rel="self"/>
  <updated>2015-02-16T00:42:00+00:00</updated>
  <author>
    <name>uzimith</name>
  </author>
  <entry>
    <title>Javscriptのクラス対応(=React 0.13対応)のFlummoxを試してみた</title>
    <link rel="alternate" href="https://uzimith.github.io/2015/02/16/react-flummox-demo/"/>
    <id>https://uzimith.github.io/2015/02/16/react-flummox-demo/</id>
    <published>2015-02-16T00:42:00+00:00</published>
    <updated>2016-01-01T05:06:47+00:00</updated>
    <summary type="html">&lt;p&gt;&lt;a href="http://uzimith.github.io/2015/02/13/react-jade-coffee/"&gt;前回の記事&lt;/a&gt;で快適なReact環境を手に入れることが出来た私ですが、Fluxを導入しようとして壁にぶち当たりました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://amagitakayosi.hatenablog.com/entry/fluxxor-introduction"&gt;Fluxxor&lt;/a&gt;などの有名なFlux実装などは
StoreとComponentの紐付けに従来のMixinを利用することが前提となっていますが、ReactにおいてMixinはReact.Componentを利用していると使えません。&lt;/p&gt;

&lt;p&gt;ちょっとGithubを見ていたら&lt;a href="https://github.com/acdlite/flummox"&gt;acdlite/flummox&lt;/a&gt;が特徴にReact 0.13対応だと書いてあったのでとりあえずTodoを実装しまし...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;a href="http://uzimith.github.io/2015/02/13/react-jade-coffee/"&gt;前回の記事&lt;/a&gt;で快適なReact環境を手に入れることが出来た私ですが、Fluxを導入しようとして壁にぶち当たりました。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://amagitakayosi.hatenablog.com/entry/fluxxor-introduction"&gt;Fluxxor&lt;/a&gt;などの有名なFlux実装などは
StoreとComponentの紐付けに従来のMixinを利用することが前提となっていますが、ReactにおいてMixinはReact.Componentを利用していると使えません。&lt;/p&gt;

&lt;p&gt;ちょっとGithubを見ていたら&lt;a href="https://github.com/acdlite/flummox"&gt;acdlite/flummox&lt;/a&gt;が特徴にReact 0.13対応だと書いてあったのでとりあえずTodoを実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://uzimith.github.io/flux-practice/react/"&gt;Todoデモ&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/uzimith/flux-practice/tree/gh-pages/react"&gt;ソースコード&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_0"&gt;簡単な説明&lt;/h2&gt;

&lt;h3 id="toc_1"&gt;Actions&lt;/h3&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoActions&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Actions&lt;/span&gt;
  &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;999999&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
      &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数の返り値が自動的にDispatcherに送られる。(undefinedを送るとDispatcherに無視されるので注意)&lt;/p&gt;

&lt;h3 id="toc_2"&gt;Store&lt;/h3&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoStore&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;
  &lt;span class="na"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flux&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;
    &lt;span class="nx"&gt;todoActions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getActionIds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'todo'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todoActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;handleNewTodo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hoge"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="na"&gt;handleNewTodo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;todos&lt;/span&gt;
    &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;
    &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;setState&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;React.Componentっぽく書ける。setState()すると自動的にDispatcherにemitされ紐付いたComponentが更新される。&lt;/p&gt;

&lt;p&gt;@register(actionId, handler)でDispatcherにhandlerが登録される。
ActionsIdが示すアクションの返り値がDispatcherを介してhandlerの引数となりhandlerが実行される。&lt;/p&gt;

&lt;p&gt;handlerは関数だったらなんでもいいらしいが、普通にメソッドを渡すといい。&lt;/p&gt;

&lt;h3 id="toc_3"&gt;Flux&lt;/h3&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppFlux&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Flux&lt;/span&gt;
  &lt;span class="na"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;
    &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;createActions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'todo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TodoActions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'todo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TodoStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;createActions(key, ActionsClass, &amp;hellip;args)とcreateStore(key, StoreClass, &amp;hellip;args)でActionsとStoreが登録できる。argsはそれぞれcreateするときの
引数になる(この場合Storeの方はnew TodoStore(this)となる)&lt;/p&gt;

&lt;p&gt;このインスタンスのメソッドgetActions(key)やgetStore(key)を呼び出すとActionsやStoreのインスタンスが返ってくる。&lt;/p&gt;

&lt;h3 id="toc_4"&gt;Component&lt;/h3&gt;

&lt;p&gt;あとは&lt;code&gt;flux = new AppFlux()&lt;/code&gt;してComponentを書いていく。&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="na"&gt;flux&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flux&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'container'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Application&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Component&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;jade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"""
      FluxComponent(flux=flux connectToStores=['todo'])
        TodoPanel
    """&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;FluxContainer flux=flux connectToStores=[key]&lt;/code&gt;とするとStoreの@stateがFluxComponentの@propsになる。だから、中のComponentから参照できる。&lt;/p&gt;

&lt;p&gt;(この理解が微妙に適当。親のpropsをなんで参照できるのか分かってないまま書いた)&lt;/p&gt;

&lt;p&gt;FluxComponentは別に配列じゃなくてもいい。&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;FluxComponent&lt;/span&gt; &lt;span class="nx"&gt;connectToStores&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
  &lt;span class="na"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCommentsForPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actionを呼び出すときは&lt;code&gt;@props.flux.getActions(&amp;quot;todo&amp;quot;).createTodo(@state.newTodoText)&lt;/code&gt;といった感じ。&lt;/p&gt;

&lt;h2 id="toc_5"&gt;所感&lt;/h2&gt;

&lt;p&gt;こんな感じにFLux書きたかった。&lt;/p&gt;

&lt;p&gt;Facebookのfluxは初見の私には魔法の言葉が飛び交っているようにしか見えなかったです。&lt;/p&gt;

&lt;h2 id="toc_6"&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/acdlite/flummox/blob/master/docs/quick-start.md"&gt;flummox/quick-start.md at master · acdlite/flummox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/acdlite/flummox/blob/master/docs/react-integration.md"&gt;flummox/react-integration.md at master · acdlite/flummox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>React.jsをCoffeeScriptとjadeで書く</title>
    <link rel="alternate" href="https://uzimith.github.io/2015/02/13/react-jade-coffee/"/>
    <id>https://uzimith.github.io/2015/02/13/react-jade-coffee/</id>
    <published>2015-02-13T12:00:00+00:00</published>
    <updated>2016-01-01T05:06:47+00:00</updated>
    <summary type="html">&lt;h1 id="toc_0"&gt;はじめに&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html"&gt;React v0.13.0 Beta 1 | React&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;React.Componentを使うと生のJSのclass形式でReact Componentを定義できる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://qiita.com/mizchi/items/4e17b54cd9cc70d747cc"&gt;reactjs - react-jadeでjadeテンプレートから仮想DOMを出力する - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;JSXのXの部分をjadeで書けるようにするライブラリ (Jade -&amp;gt; React VDOM)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここあたりの記事を読んでRiot.jsなら素でできるCoffeeScriptとJadeの組み合わ...&lt;/p&gt;</summary>
    <content type="html">&lt;h1 id="toc_0"&gt;はじめに&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://facebook.github.io/react/blog/2015/01/27/react-v0.13.0-beta-1.html"&gt;React v0.13.0 Beta 1 | React&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;React.Componentを使うと生のJSのclass形式でReact Componentを定義できる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/mizchi/items/4e17b54cd9cc70d747cc"&gt;reactjs - react-jadeでjadeテンプレートから仮想DOMを出力する - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;JSXのXの部分をjadeで書けるようにするライブラリ (Jade -&gt; React VDOM)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここあたりの記事を読んでRiot.jsなら素でできるCoffeeScriptとJadeの組み合わせがReactでも出来そうだと気づいたので試行錯誤中、
よさ気な書き方を見つけた話です。&lt;/p&gt;

&lt;h1 id="toc_1"&gt;結論&lt;/h1&gt;

&lt;p&gt;こうです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/uzimith/145a0cf8e342dc46ac96"&gt;https://gist.github.com/uzimith/145a0cf8e342dc46ac96&lt;/a&gt;&lt;/p&gt;
&lt;pre class="highlight coffeescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;jade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'react-jade'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lodash'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Component&lt;/span&gt;
  &lt;span class="na"&gt;constructor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="na"&gt;tick&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;setState&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;jade&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"""
      #counter
        span Count :
        button(onClick=tick)= count
    """&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;assign&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@&lt;/span&gt;&lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)(),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'container'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;React.jsの俺的主なキツさの原因である今どき生HTML, なんかめっちゃ多いthis, React.CreateComponet, getInitialStateとかいう意味不明なメソッド等々が
まとめて解決されて良さそうです。&lt;/p&gt;

&lt;h3 id="toc_2"&gt;コメント&lt;/h3&gt;

&lt;p&gt;Qiitaを見ていたら@mizchiさんがreact-jadeを使ってるとのことで下記のプロジェクトを見てたら
&lt;code&gt;template(_.extend {}, @, @props, @state)&lt;/code&gt;とjadeテンプレートを呼び出していました。&lt;/p&gt;

&lt;p&gt;thisに定義されている関数とpropsとstateの値をマージしてテンプレートに渡す手法がまさに自分の求めていたものでさすが利用者は違いますね。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://mizchi.hatenablog.com/entry/2015/02/02/004728"&gt;俺専用ReactのSVGスケッチ環境作った - mizchi&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;react-jadeにはjade.compileFile()といった関数もあるのでいざとなったらテンプレートのファイル分割も簡単にできるのも利点になりそうです。&lt;/p&gt;

&lt;h2 id="toc_3"&gt;browserifyで使ってるライブラリ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jadejs/react-jade"&gt;jadejs/react-jade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jnordberg/coffeeify"&gt;jnordberg/coffeeify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだreact-jadeがreact v0.13 betaに対応していないので依存関係削除してインストールしてますが
多分問題無いと思うのでリリースされたら対応されるんじゃないでしょうか。&lt;/p&gt;

&lt;h2 id="toc_4"&gt;所感&lt;/h2&gt;

&lt;p&gt;React.CreateElementやReact.DOMなどを生で駆使するとか&lt;a href="http://qiita.com/mizchi/items/811fb25372ce2f12783e"&gt;ラッパーを書いて頑張る&lt;/a&gt;とか考えたんですが
他で定義したコンポーネントがタグを書くだけで呼び出せるあたり、この手法が一番良さそうです。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Riot.jsでFluxのデモ実装した。</title>
    <link rel="alternate" href="https://uzimith.github.io/2015/02/11/riotjs-de-flux/"/>
    <id>https://uzimith.github.io/2015/02/11/riotjs-de-flux/</id>
    <published>2015-02-11T13:32:00+00:00</published>
    <updated>2016-01-01T05:06:47+00:00</updated>
    <summary type="html">&lt;p&gt;フロントエンド開発でコンポーネント指向で書きたいのは間違いないんですが、
Reactは簡単な事をするのにも大量のコードを必要として手軽に書くのには辛いライブラリだと思っていたところ、
Qiitaで&lt;a href="https://muut.com/riotjs/"&gt;よさ気なライブラリ&lt;/a&gt;が話題になってました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/cognitom/items/fb1295f3f93911e9e92d"&gt;Riot.js 2.0 を触ってみた — まだReactで消耗しているの? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/jgs/items/afa7bca6d4d88812b7e4"&gt;Riotjsのいいところ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もともと&lt;a href="https://github.com/facebook/flux"&gt;flux&lt;/a&gt;のデモコードがまったく理解できなくて悩んでいたところだったので2つのデモを実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://uzimith.github.io/flux-practice/todo/"&gt;Todo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    <content type="html">&lt;p&gt;フロントエンド開発でコンポーネント指向で書きたいのは間違いないんですが、
Reactは簡単な事をするのにも大量のコードを必要として手軽に書くのには辛いライブラリだと思っていたところ、
Qiitaで&lt;a href="https://muut.com/riotjs/"&gt;よさ気なライブラリ&lt;/a&gt;が話題になってました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://qiita.com/cognitom/items/fb1295f3f93911e9e92d"&gt;Riot.js 2.0 を触ってみた — まだReactで消耗しているの? - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qiita.com/jgs/items/afa7bca6d4d88812b7e4"&gt;Riotjsのいいところ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もともと&lt;a href="https://github.com/facebook/flux"&gt;flux&lt;/a&gt;のデモコードがまったく理解できなくて悩んでいたところだったので2つのデモを実装しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://uzimith.github.io/flux-practice/todo/"&gt;Todo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://uzimith.github.io/flux-practice/chat/"&gt;Chat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/uzimith/flux-practice"&gt;https://github.com/uzimith/flux-practice&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Fluxについて&lt;/h2&gt;

&lt;p&gt;fluxのコンセプトについては&lt;a href="http://facebook.github.io/flux/docs/overview.html"&gt;公式サイト&lt;/a&gt;読んでても全く理解できなかったので、下のサイトを見て覚えました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://saneyukis.hatenablog.com/entry/2014/09/26/174750"&gt;Fluxアーキテクチャの覚え書きを書いた - snyk_s log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://saneyukis.hatenablog.com/entry/2014/12/24/014421"&gt;Fluxとはなんだったのか + misc at 2014 - snyk_s log&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jonathancreamer.com/what-the-flux/"&gt;What the flux?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actionが(ユーザーの)動作、DispatcherがObserver、StoreがModelでAction -&gt; Dispatcher -&gt; Store -&gt; Viewの一方通行でデータが動くと思えば大体合ってる気がします。&lt;/p&gt;

&lt;p&gt;しかし、いまだにWEB APIがActionCreaterから呼び出される利点が未だに分かってないです。Storeで隠蔽してもいいと思うんですが。
複数のStoreを叩く必要があるAPI呼び出しを書く際に困らない、のかなといったところ。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>jspmって遅い？</title>
    <link rel="alternate" href="https://uzimith.github.io/2015/02/02/jspm-is-slow/"/>
    <id>https://uzimith.github.io/2015/02/02/jspm-is-slow/</id>
    <published>2015-02-01T16:30:00+00:00</published>
    <updated>2016-01-01T05:06:47+00:00</updated>
    <summary type="html">&lt;h1 id="toc_0"&gt;jspmについて&lt;/h1&gt;

&lt;p&gt;みなさん&lt;a href="http://jspm.io/"&gt;jspm&lt;/a&gt;ってご存知ですか。
自分はQiitaの記事で知ったんですけど。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://qiita.com/hrsh7th@github/items/0a225c46ba17196b9a55"&gt;jspm で快適 javascript 生活（クライアントサイド JS の依存管理決定版） - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ModuleLoader/es6-module-loader"&gt;ES6 module loader&lt;/a&gt;を利用してES6のimport文で前もってダウンロードしていたパッケージを読み込む仕組みになってるみたいです。依存も解決してくれるし特にnpmでもgithubでも&lt;a href="https://github.com/guybedford/jspm-bower"&gt;bowerでも&lt;/a&gt;インストールできるのが明らかな優位な点っぽいです。&lt;/p&gt;

&lt;h1 id="toc_1"&gt;importって速...&lt;/h1&gt;</summary>
    <content type="html">&lt;h1 id="toc_0"&gt;jspmについて&lt;/h1&gt;

&lt;p&gt;みなさん&lt;a href="http://jspm.io/"&gt;jspm&lt;/a&gt;ってご存知ですか。
自分はQiitaの記事で知ったんですけど。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://qiita.com/hrsh7th@github/items/0a225c46ba17196b9a55"&gt;jspm で快適 javascript 生活（クライアントサイド JS の依存管理決定版） - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ModuleLoader/es6-module-loader"&gt;ES6 module loader&lt;/a&gt;を利用してES6のimport文で前もってダウンロードしていたパッケージを読み込む仕組みになってるみたいです。依存も解決してくれるし特にnpmでもgithubでも&lt;a href="https://github.com/guybedford/jspm-bower"&gt;bowerでも&lt;/a&gt;インストールできるのが明らかな優位な点っぽいです。&lt;/p&gt;

&lt;h1 id="toc_1"&gt;importって速度的に大丈夫なの？&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;jspm init&lt;/code&gt;ってやると&lt;code&gt;config.js&lt;/code&gt;と&lt;code&gt;es6-module-loader.js&lt;/code&gt;とかが入った&lt;code&gt;jspm_packages&lt;/code&gt;のフォルダが生成されるんですが、そんないろんなファイルをインポートして遅くならないかなって
思い&lt;code&gt;jspm slow&lt;/code&gt;とかでぐぐてみたんですけど特に計測してるサイトとか無かったのでまあ問題ないものかなとReactを書き始めてみました。
すると表示が明らかに待たされて違和感バリバリだったのでwatchifyでも変換したファイルを読み込む場合とくらべてみました。&lt;/p&gt;

&lt;h2 id="toc_2"&gt;jspmの場合&lt;/h2&gt;

&lt;div class="video"&gt;
    &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/XS4vxqguf1U?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/uzimith/flux-todo-practice/tree/692aa4eb33afd1fd372d51da10b517db4384d0d7"&gt;https://github.com/uzimith/flux-todo-practice/tree/692aa4eb33afd1fd372d51da10b517db4384d0d7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.30 s&lt;/p&gt;

&lt;h1 id="toc_3"&gt;watchifyの場合&lt;/h1&gt;

&lt;div class="video"&gt;
    &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pwv-8zQddBE?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://github.com/uzimith/flux-todo-practice/tree/4d2bc63b8026cdc42ebb5d2bac99733eecb188b9#"&gt;https://github.com/uzimith/flux-todo-practice/tree/4d2bc63b8026cdc42ebb5d2bac99733eecb188b9#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;275 ms&lt;/p&gt;

&lt;p&gt;さすがに文字を出すだけでこの速度になるようでは実用性に欠けるのではないかと思っていたところ&lt;a href="https://github.com/jspm/jspm-cli/wiki/Production-Workflows"&gt;Prodoction環境用のファイル生成法&lt;/a&gt;がありました。
&lt;code&gt;jspm bundle&lt;/code&gt;して&lt;code&gt;build.js&lt;/code&gt;を作って読み込ませるといいらしい。&lt;/p&gt;

&lt;div class="video"&gt;
    &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/2fM2tmrqxjk?rel=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;324 msと、かなり早くなりました。とはいえwatchifyは250ms前後で安定してるのでこのコードの場合はwatchifyの生成するコードの方が若干速いです。&lt;/p&gt;

&lt;h1 id="toc_4"&gt;所感&lt;/h1&gt;

&lt;p&gt;jspmでもbundleすれば十分速度が出るっぽいです。実はトップページを目を通せばひと目でわかることなんですが。&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;For production, optimize into a bundle, layered bundles or a self-executing bundle with a single command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とはいえ自分的には開発中レンダリングが遅いほうが苦になるのが目に見えてるし、JSXで書くために&lt;a href="https://github.com/floatdrop/plugin-jsx"&gt;パスの指定が&lt;code&gt;.jsx!&lt;/code&gt;になる&lt;/a&gt;とださいし、
6to5ify,reactify,uglifyなどwatchifyで機能性は十分、むしろ高いとjspmを使う理由は見当たらないといったところです。&lt;/p&gt;

&lt;p&gt;ビルドのほうが時間がかかるということならjspmのほうがいいと思いますが、大規模なプロジェクトとかだとそうなんですかね？&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Oboe.jsのデモ</title>
    <link rel="alternate" href="https://uzimith.github.io/2015/01/14/oboe-sample/"/>
    <id>https://uzimith.github.io/2015/01/14/oboe-sample/</id>
    <published>2015-01-14T14:38:00+00:00</published>
    <updated>2016-01-01T05:06:47+00:00</updated>
    <summary type="html">&lt;p&gt;今日は&lt;a href="http://oboejs.com/"&gt;Oboe.js&lt;/a&gt;を触っていたのでその記事です。&lt;/p&gt;

&lt;h1 id="toc_0"&gt;Oboe.jsとは&lt;/h1&gt;

&lt;p&gt;JSONをストリーミングで読み込むライブラリです。通常のAJAXだとJSONをすべて読み込むまで待機するため
大きいファイルを扱ったり、モバイル環境のような低速環境だったりすると読み込み完了までなんの情報も得られない
という欠点を改善してくれます。&lt;/p&gt;

&lt;p&gt;とはいえ、いまいちピンとこないのでデモサイト作って動作確認してました。&lt;/p&gt;

&lt;h2 id="toc_1"&gt;コード例&lt;/h2&gt;

&lt;p&gt;とりあえず&lt;a href="http://oboejs.com/examples"&gt;Example&lt;/a&gt;を見る。&lt;/p&gt;

&lt;p&gt;Oboe.jsの目的ではないが、AJAXライ...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;今日は&lt;a href="http://oboejs.com/"&gt;Oboe.js&lt;/a&gt;を触っていたのでその記事です。&lt;/p&gt;

&lt;h1 id="toc_0"&gt;Oboe.jsとは&lt;/h1&gt;

&lt;p&gt;JSONをストリーミングで読み込むライブラリです。通常のAJAXだとJSONをすべて読み込むまで待機するため
大きいファイルを扱ったり、モバイル環境のような低速環境だったりすると読み込み完了までなんの情報も得られない
という欠点を改善してくれます。&lt;/p&gt;

&lt;p&gt;とはいえ、いまいちピンとこないのでデモサイト作って動作確認してました。&lt;/p&gt;

&lt;h2 id="toc_1"&gt;コード例&lt;/h2&gt;

&lt;p&gt;とりあえず&lt;a href="http://oboejs.com/examples"&gt;Example&lt;/a&gt;を見る。&lt;/p&gt;

&lt;p&gt;Oboe.jsの目的ではないが、AJAXライブラリとしても使える。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;oboe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/myapp/things.json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// すべて読み込みが完了した場合&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="c1"&gt;// なんらかのエラーが発生した場合&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ストリーミングで受け取るには以下&lt;/p&gt;

&lt;p&gt;こういうJSONが来るとして&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="s2"&gt;"foods"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"aubergine"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s2"&gt;"colour"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"purple"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"apple"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;"colour"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"nuts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="s2"&gt;"colour"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"brown"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="s2"&gt;"badThings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"poison"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="s2"&gt;"colour"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"pink"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"broken_glass"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"colour"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;oboe.node(&amp;lsquo;pattern&amp;rsquo;, callback)を指定する。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;oboe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/myapp/things.json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'foods.*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;foodThing&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;

      &lt;span class="c1"&gt;// 'foods.*'に該当する新しい要素を見つけるとこのコールバックが呼ばれる。&lt;/span&gt;

      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'Go eat some'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;foodThing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'badThings.*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;badThing&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;

      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'Stay away from'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;badThing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="s1"&gt;'there are'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'things to eat'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;'and'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;things&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nonFoods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'to avoid'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;oboe.path(&amp;lsquo;pattern&amp;rsquo;, callback)を利用することでoboe.node()よりも早く
callbackを呼び出すことができる。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currentPersonElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;oboe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'people.json'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'people.*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="c1"&gt;// パターンに該当する要素が存在することが分かったら&lt;/span&gt;
      &lt;span class="c1"&gt;// 中身を読み込む前にpathで指定されたコールバックを呼び出す。&lt;/span&gt;
      &lt;span class="c1"&gt;// 例えば、ここでは人物が読み込まれると分かった時点で&lt;/span&gt;
      &lt;span class="c1"&gt;// div要素を作ることで、とりあえず人物が読み込まれることをユーザーに示すことができる。&lt;/span&gt;
      &lt;span class="nx"&gt;currentPersonElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="person"&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'#people'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPersonElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="s1"&gt;'people.*.name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="c1"&gt;// 名前を見つけた時点でdiv要素に名前を埋め込む&lt;/span&gt;
         &lt;span class="nx"&gt;currentPersonElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'&amp;lt;span class="name"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/span&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s1"&gt;'people.*.email'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="c1"&gt;// メールアドレスを見つけた時点でdiv要素に名前を埋め込む&lt;/span&gt;
         &lt;span class="nx"&gt;currentPersonElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s1"&gt;'&amp;lt;span class="email"&amp;gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/span&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パターンの例が&lt;a href="http://oboejs.com/examples#example-patterns"&gt;こちら&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*&lt;/code&gt;が任意のオブジェクト、&lt;code&gt;!&lt;/code&gt;がルートと言った感じ。&lt;/p&gt;

&lt;h1 id="toc_2"&gt;使ってみた&lt;/h1&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"article"&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"..."&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// ... (10000件)&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいなJSONを作って読み込ませてみました。&lt;/p&gt;

&lt;h2 id="toc_3"&gt;oboe.done()&lt;/h2&gt;

&lt;p&gt;すべて読み込んでから表示します。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"jquery"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;oboe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"oboe"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#articles"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;div&amp;gt;start&amp;lt;/div&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;oboe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"articles.json"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;div&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/div&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://uzimith.github.io/oboe-sample/done.html"&gt;oboe.done()&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="toc_4"&gt;oboe.node()&lt;/h2&gt;

&lt;p&gt;ストリーミングで表示します。&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"jquery"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;oboe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"oboe"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;dom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"#articles"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;div&amp;gt;start&amp;lt;/div&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;oboe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"articles.json"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'article.*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;div&amp;gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/div&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://uzimith.github.io/oboe-sample/node.html"&gt;oboe.node()&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="toc_5"&gt;所感&lt;/h1&gt;

&lt;p&gt;ローカルで試す分には回線が早すぎて関数呼び出しの分か、むしろnode()の方が
レンダリングが遅かったんですが、回線速度を下げてみると確かに順次表示されてました。
大きいJSONを読み込む際にはいいかもしれません。&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>middleman-blogでの検索機能をJavascript(React)で実装した。</title>
    <link rel="alternate" href="https://uzimith.github.io/2015/01/11/middleman-blog-search/"/>
    <id>https://uzimith.github.io/2015/01/11/middleman-blog-search/</id>
    <published>2015-01-11T05:12:00+00:00</published>
    <updated>2016-01-01T05:06:47+00:00</updated>
    <summary type="html">&lt;p&gt;&lt;a href="https://github.com/joelhans/middleman-search-example"&gt;middleman-blogの検索機能の前例&lt;/a&gt;はあるんですが
jQueryを利用しているため宗教上の理由により使用できません。&lt;/p&gt;

&lt;h1 id="toc_0"&gt;説明&lt;/h1&gt;

&lt;p&gt;最近は&lt;a href="http://facebook.github.io/react/"&gt;React&lt;/a&gt;が気になっているのでこちらで実装しました。&lt;/p&gt;

&lt;p&gt;こちらが&lt;a href="https://uzimith.github.io/middleman-blog-search-sample/"&gt;デモ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;img alt="demo" width="500" height="110" src="images/post/15/0111/search-3904c48f.png"&gt;
前例に比べて該当部分を表示する機能も追加したので使いやすいんじゃないかと。&lt;/p&gt;

&lt;h1 id="toc_1"&gt;実装&lt;/h1&gt;

&lt;p&gt;ソースコードはこちらです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/uzimith/middleman-blog-search-sample"&gt;uzimith/middleman-blog-search-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考にどうぞ。&lt;/p&gt;

&lt;h2 id="toc_2"&gt;所感&lt;/h2&gt;

&lt;p&gt;Reactのチュートリアル見ながら書いてたら簡単に書け...&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;&lt;a href="https://github.com/joelhans/middleman-search-example"&gt;middleman-blogの検索機能の前例&lt;/a&gt;はあるんですが
jQueryを利用しているため宗教上の理由により使用できません。&lt;/p&gt;

&lt;h1 id="toc_0"&gt;説明&lt;/h1&gt;

&lt;p&gt;最近は&lt;a href="http://facebook.github.io/react/"&gt;React&lt;/a&gt;が気になっているのでこちらで実装しました。&lt;/p&gt;

&lt;p&gt;こちらが&lt;a href="https://uzimith.github.io/middleman-blog-search-sample/"&gt;デモ&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;&lt;img alt="demo" width="500" height="110" src="images/post/15/0111/search-3904c48f.png" /&gt;
前例に比べて該当部分を表示する機能も追加したので使いやすいんじゃないかと。&lt;/p&gt;

&lt;h1 id="toc_1"&gt;実装&lt;/h1&gt;

&lt;p&gt;ソースコードはこちらです。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/uzimith/middleman-blog-search-sample"&gt;uzimith/middleman-blog-search-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考にどうぞ。&lt;/p&gt;

&lt;h2 id="toc_2"&gt;所感&lt;/h2&gt;

&lt;p&gt;Reactのチュートリアル見ながら書いてたら簡単に書けました。
さらにちょうど先月のAdvent Calendarが分かりやすいので、いま始めやすいと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://qiita.com/advent-calendar/2014/reactjs"&gt;一人React.js Advent Calendar 2014 - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;書き始めは双方向バインドじゃないのかと若干失望気味だったんですが、データの流れを一方向にすることでアプリケーションを複雑さを
減らすという思想が結構良いですね。一度Fluxを使った中規模アプリケーション書いてみたいです。&lt;/p&gt;

&lt;p&gt;Reactはコンポーネント思想でつまりいろいろ飛び飛びで見なくても、その機能のすべてが集まってる、そういう感じで書く印象です。&lt;/p&gt;

&lt;p&gt;Web Componentsと&lt;a href="https://www.polymer-project.org/"&gt;Polymer&lt;/a&gt;が同じ思想で出来てるのかなといった感じですが、
Polymerは将来的に正しく未来のWebはこう書ければいいという夢を語る実装で、Reactは現実的に実用できる範囲で実装されているんでしょう。&lt;/p&gt;

&lt;p&gt;いまPolymerを使うと遅すぎて話にならないですが、Web ComponentsはC++で実装されるわけですからそのうち早くなる未来が待ってるはず。&lt;/p&gt;

&lt;p&gt;それまではコンポーネント思想ならReactですね。よさ気なライブラリです。&lt;/p&gt;
</content>
  </entry>
</feed>
